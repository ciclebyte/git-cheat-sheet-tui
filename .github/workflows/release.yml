name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        goos: [windows, linux]
        goarch: [amd64]
        exclude:
          - goos: darwin
            goarch: 386
        include:
          - goos: windows
            ext: .exe
          - goos: linux
            ext: ""
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install SQLite dependencies
        run: sudo apt-get install -y libsqlite3-dev

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib libsqlite3-dev
          if [ "${{ matrix.goos }}" == "windows" ]; then
            sudo apt-get install -y gcc-mingw-w64 gcc-mingw-w64-i686
          elif [ "${{ matrix.goos }}" == "darwin" ]; then
            # Install macOS cross-compilation tools
            sudo apt-get install -y clang llvm libc++-dev libc++abi-dev
            wget https://github.com/tpoechtrager/osxcross/archive/master.zip
            unzip master.zip
            cd osxcross-master
            wget https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
            mv MacOSX11.3.sdk.tar.xz tarballs/
            ./build.sh
            echo "$PWD/target/bin" >> $GITHUB_PATH
          fi

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          if [ "${{ matrix.goos }}" == "windows" ]; then
            if [ "${{ matrix.goarch }}" == "386" ]; then
              CC=i686-w64-mingw32-gcc go build -o gitsheet${{ matrix.ext }}
            else
              CC=x86_64-w64-mingw32-gcc go build -o gitsheet${{ matrix.ext }}
            fi
          elif [ "${{ matrix.goos }}" == "darwin" ]; then
            # Use osxcross for Darwin builds
            CC=o64-clang CXX=o64-clang++ go build -o gitsheet${{ matrix.ext }}
          else
            go build -o gitsheet${{ matrix.ext }}
          fi

      - name: Archive binary
        run: |
          mkdir -p release
          mv gitsheet${{ matrix.ext }} release/gitsheet-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          if [ "${{ matrix.goos }}" != "windows" ]; then
            tar -czvf release/gitsheet-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz -C release gitsheet-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
            rm release/gitsheet-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitsheet-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: release/gitsheet-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && matrix.ext || '.tar.gz' }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
